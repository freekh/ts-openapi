"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var tsgen = require("./engine");
exports.allPaths = ["/{userId}/drafts", "/{userId}/drafts/send", "/{userId}/drafts/{id}", "/{userId}/history", "/{userId}/labels", "/{userId}/labels/{id}", "/{userId}/messages", "/{userId}/messages/batchDelete", "/{userId}/messages/batchModify", "/{userId}/messages/import", "/{userId}/messages/send", "/{userId}/messages/{id}", "/{userId}/messages/{id}/modify", "/{userId}/messages/{id}/trash", "/{userId}/messages/{id}/untrash", "/{userId}/messages/{messageId}/attachments/{id}", "/{userId}/profile", "/{userId}/settings/autoForwarding", "/{userId}/settings/delegates", "/{userId}/settings/delegates/{delegateEmail}", "/{userId}/settings/filters", "/{userId}/settings/filters/{id}", "/{userId}/settings/forwardingAddresses", "/{userId}/settings/forwardingAddresses/{forwardingEmail}", "/{userId}/settings/imap", "/{userId}/settings/language", "/{userId}/settings/pop", "/{userId}/settings/sendAs", "/{userId}/settings/sendAs/{sendAsEmail}", "/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo", "/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}", "/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault", "/{userId}/settings/sendAs/{sendAsEmail}/verify", "/{userId}/settings/vacation", "/{userId}/stop", "/{userId}/threads", "/{userId}/threads/{id}", "/{userId}/threads/{id}/modify", "/{userId}/threads/{id}/trash", "/{userId}/threads/{id}/untrash", "/{userId}/watch"];
function api(host, engine) {
    var engineHandler = engine.init(host);
    var handle = engine.handler(engineHandler);
    var path = function (p, onlyBodyOrFullResponse) {
        if (onlyBodyOrFullResponse === void 0) {
            onlyBodyOrFullResponse = tsgen.OnlyBodyOrFullResponse.OnlyBody;
        }
        if (onlyBodyOrFullResponse === tsgen.OnlyBodyOrFullResponse.OnlyBody)
            switch (p) {
                case "/{userId}/drafts": return { get: function (userId, includeSpamTrash, maxResults, pageToken, q) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), { includeSpamTrash: includeSpamTrash, maxResults: maxResults, pageToken: pageToken, q: q }, __assign({ "Content-Type": "application/json" }, {}))); }, post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/drafts/send": return { post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/drafts/{id}": return { "delete": function (userId, id) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, id, format) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, id: id }), { format: format }, __assign({ "Content-Type": "application/json" }, {}))); }, put: function (userId, id) { return engine.process(handle("put", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/history": return { get: function (userId, historyTypes, labelId, maxResults, pageToken, startHistoryId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), { historyTypes: historyTypes, labelId: labelId, maxResults: maxResults, pageToken: pageToken, startHistoryId: startHistoryId }, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/labels": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/labels/{id}": return { "delete": function (userId, id) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, id) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, patch: function (userId, id) { return engine.process(handle("patch", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, put: function (userId, id) { return engine.process(handle("put", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages": return { get: function (userId, includeSpamTrash, labelIds, maxResults, pageToken, q) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), { includeSpamTrash: includeSpamTrash, labelIds: labelIds, maxResults: maxResults, pageToken: pageToken, q: q }, __assign({ "Content-Type": "application/json" }, {}))); }, post: function (userId, deleted, internalDateSource) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), { deleted: deleted, internalDateSource: internalDateSource }, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/batchDelete": return { post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/batchModify": return { post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/import": return { post: function (userId, deleted, internalDateSource, neverMarkSpam, processForCalendar) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), { deleted: deleted, internalDateSource: internalDateSource, neverMarkSpam: neverMarkSpam, processForCalendar: processForCalendar }, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/send": return { post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/{id}": return { "delete": function (userId, id) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, id, format, metadataHeaders) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, id: id }), { format: format, metadataHeaders: metadataHeaders }, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/{id}/modify": return { post: function (userId, id) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/{id}/trash": return { post: function (userId, id) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/{id}/untrash": return { post: function (userId, id) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/{messageId}/attachments/{id}": return { get: function (userId, messageId, id) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, messageId: messageId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/profile": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/autoForwarding": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, put: function (userId) { return engine.process(handle("put", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/delegates": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/delegates/{delegateEmail}": return { "delete": function (userId, delegateEmail) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, delegateEmail: delegateEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, delegateEmail) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, delegateEmail: delegateEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/filters": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/filters/{id}": return { "delete": function (userId, id) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, id) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/forwardingAddresses": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/forwardingAddresses/{forwardingEmail}": return { "delete": function (userId, forwardingEmail) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, forwardingEmail: forwardingEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, forwardingEmail) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, forwardingEmail: forwardingEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/imap": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, put: function (userId) { return engine.process(handle("put", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/language": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, put: function (userId) { return engine.process(handle("put", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/pop": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, put: function (userId) { return engine.process(handle("put", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/sendAs": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/sendAs/{sendAsEmail}": return { "delete": function (userId, sendAsEmail) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, sendAsEmail) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, patch: function (userId, sendAsEmail) { return engine.process(handle("patch", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, put: function (userId, sendAsEmail) { return engine.process(handle("put", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo": return { get: function (userId, sendAsEmail) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, post: function (userId, sendAsEmail) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}": return { "delete": function (userId, sendAsEmail, id) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, sendAsEmail, id) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault": return { post: function (userId, sendAsEmail, id) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/sendAs/{sendAsEmail}/verify": return { post: function (userId, sendAsEmail) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/vacation": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, put: function (userId) { return engine.process(handle("put", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/stop": return { post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/threads": return { get: function (userId, includeSpamTrash, labelIds, maxResults, pageToken, q) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), { includeSpamTrash: includeSpamTrash, labelIds: labelIds, maxResults: maxResults, pageToken: pageToken, q: q }, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/threads/{id}": return { "delete": function (userId, id) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, id, format, metadataHeaders) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, id: id }), { format: format, metadataHeaders: metadataHeaders }, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/threads/{id}/modify": return { post: function (userId, id) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/threads/{id}/trash": return { post: function (userId, id) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/threads/{id}/untrash": return { post: function (userId, id) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/watch": return { post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                default: return tsgen.unknownPath(exports.allPaths, p);
            }
        else
            switch (p) {
                case "/{userId}/drafts": return { get: function (userId, includeSpamTrash, maxResults, pageToken, q) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), { includeSpamTrash: includeSpamTrash, maxResults: maxResults, pageToken: pageToken, q: q }, __assign({ "Content-Type": "application/json" }, {}))); }, post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/drafts/send": return { post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/drafts/{id}": return { "delete": function (userId, id) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, id, format) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, id: id }), { format: format }, __assign({ "Content-Type": "application/json" }, {}))); }, put: function (userId, id) { return engine.process(handle("put", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/history": return { get: function (userId, historyTypes, labelId, maxResults, pageToken, startHistoryId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), { historyTypes: historyTypes, labelId: labelId, maxResults: maxResults, pageToken: pageToken, startHistoryId: startHistoryId }, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/labels": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/labels/{id}": return { "delete": function (userId, id) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, id) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, patch: function (userId, id) { return engine.process(handle("patch", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, put: function (userId, id) { return engine.process(handle("put", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages": return { get: function (userId, includeSpamTrash, labelIds, maxResults, pageToken, q) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), { includeSpamTrash: includeSpamTrash, labelIds: labelIds, maxResults: maxResults, pageToken: pageToken, q: q }, __assign({ "Content-Type": "application/json" }, {}))); }, post: function (userId, deleted, internalDateSource) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), { deleted: deleted, internalDateSource: internalDateSource }, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/batchDelete": return { post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/batchModify": return { post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/import": return { post: function (userId, deleted, internalDateSource, neverMarkSpam, processForCalendar) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), { deleted: deleted, internalDateSource: internalDateSource, neverMarkSpam: neverMarkSpam, processForCalendar: processForCalendar }, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/send": return { post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/{id}": return { "delete": function (userId, id) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, id, format, metadataHeaders) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, id: id }), { format: format, metadataHeaders: metadataHeaders }, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/{id}/modify": return { post: function (userId, id) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/{id}/trash": return { post: function (userId, id) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/{id}/untrash": return { post: function (userId, id) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/messages/{messageId}/attachments/{id}": return { get: function (userId, messageId, id) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, messageId: messageId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/profile": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/autoForwarding": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, put: function (userId) { return engine.process(handle("put", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/delegates": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/delegates/{delegateEmail}": return { "delete": function (userId, delegateEmail) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, delegateEmail: delegateEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, delegateEmail) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, delegateEmail: delegateEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/filters": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/filters/{id}": return { "delete": function (userId, id) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, id) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/forwardingAddresses": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/forwardingAddresses/{forwardingEmail}": return { "delete": function (userId, forwardingEmail) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, forwardingEmail: forwardingEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, forwardingEmail) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, forwardingEmail: forwardingEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/imap": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, put: function (userId) { return engine.process(handle("put", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/language": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, put: function (userId) { return engine.process(handle("put", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/pop": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, put: function (userId) { return engine.process(handle("put", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/sendAs": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/sendAs/{sendAsEmail}": return { "delete": function (userId, sendAsEmail) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, sendAsEmail) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, patch: function (userId, sendAsEmail) { return engine.process(handle("patch", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, put: function (userId, sendAsEmail) { return engine.process(handle("put", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo": return { get: function (userId, sendAsEmail) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, post: function (userId, sendAsEmail) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}": return { "delete": function (userId, sendAsEmail, id) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, sendAsEmail, id) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault": return { post: function (userId, sendAsEmail, id) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/sendAs/{sendAsEmail}/verify": return { post: function (userId, sendAsEmail) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, sendAsEmail: sendAsEmail }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/settings/vacation": return { get: function (userId) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, put: function (userId) { return engine.process(handle("put", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/stop": return { post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/threads": return { get: function (userId, includeSpamTrash, labelIds, maxResults, pageToken, q) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId }), { includeSpamTrash: includeSpamTrash, labelIds: labelIds, maxResults: maxResults, pageToken: pageToken, q: q }, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/threads/{id}": return { "delete": function (userId, id) { return engine.process(handle("delete", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); }, get: function (userId, id, format, metadataHeaders) { return engine.process(handle("get", tsgen.pathReplace(p, { userId: userId, id: id }), { format: format, metadataHeaders: metadataHeaders }, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/threads/{id}/modify": return { post: function (userId, id) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/threads/{id}/trash": return { post: function (userId, id) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/threads/{id}/untrash": return { post: function (userId, id) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId, id: id }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                case "/{userId}/watch": return { post: function (userId) { return engine.process(handle("post", tsgen.pathReplace(p, { userId: userId }), {}, __assign({ "Content-Type": "application/json" }, {}))); } };
                default: return tsgen.unknownPath(exports.allPaths, p);
            }
    };
    return { path: path };
}
exports.api = api;
